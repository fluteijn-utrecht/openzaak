# SPDX-License-Identifier: EUPL-1.2
# Copyright (C) 2024 Dimpact
# Generated by Django 4.2.11 on 2024-07-15 10:00
from django.db import migrations

from vng_api_common.constants import VertrouwelijkheidsAanduiding


def migrate_autorisatiespecs_to_catalogus_autorisaties(apps, schema_editor):
    AutorisatieSpec = apps.get_model("autorisaties", "AutorisatieSpec")
    CatalogusAutorisatie = apps.get_model("autorisaties", "CatalogusAutorisatie")
    Catalogus = apps.get_model("catalogi", "Catalogus")

    to_create = {}
    for spec in AutorisatieSpec.objects.all():
        for catalogus in Catalogus.objects.all():
            # To avoid running into issues with identical scopes in different order
            # because this causes IntegrityErrors when saving
            key = tuple([spec.applicatie, catalogus, spec.component])
            if key in to_create:
                existing_instance = to_create[key]
                if missing_scopes := [
                    scope
                    for scope in spec.scopes
                    if scope not in existing_instance.scopes
                ]:
                    existing_instance.scopes.extend(missing_scopes)
                if VertrouwelijkheidsAanduiding.get_choice_order(
                    spec.max_vertrouwelijkheidaanduiding
                ) < VertrouwelijkheidsAanduiding.get_choice_order(
                    existing_instance.max_vertrouwelijkheidaanduiding
                ):
                    existing_instance.max_vertrouwelijkheidaanduiding = (
                        spec.max_vertrouwelijkheidaanduiding
                    )
                continue

            to_create[key] = CatalogusAutorisatie(
                applicatie=spec.applicatie,
                catalogus=catalogus,
                component=spec.component,
                scopes=spec.scopes,
                max_vertrouwelijkheidaanduiding=spec.max_vertrouwelijkheidaanduiding,
            )

        # Remove trailing autorisaties, to avoid overlap between real autorisaties and virtual autorisaties
        spec.applicatie.autorisaties.filter(
            component=spec.component,
            scopes=spec.scopes,
            max_vertrouwelijkheidaanduiding=spec.max_vertrouwelijkheidaanduiding,
        ).delete()

    CatalogusAutorisatie.objects.bulk_create(to_create.values())


def migrate_catalogus_autorisaties_to_autorisatiespecs(apps, schema_editor):
    AutorisatieSpec = apps.get_model("autorisaties", "AutorisatieSpec")
    CatalogusAutorisatie = apps.get_model("autorisaties", "CatalogusAutorisatie")

    to_create = {}
    for catalogus_autorisatie in CatalogusAutorisatie.objects.all():
        key = tuple(
            [
                catalogus_autorisatie.applicatie,
                catalogus_autorisatie.component,
                tuple(catalogus_autorisatie.scopes),
            ]
        )
        if key in to_create:
            continue

        to_create[key] = AutorisatieSpec(
            applicatie=catalogus_autorisatie.applicatie,
            component=catalogus_autorisatie.component,
            scopes=catalogus_autorisatie.scopes,
            max_vertrouwelijkheidaanduiding=catalogus_autorisatie.max_vertrouwelijkheidaanduiding,
        )

    AutorisatieSpec.objects.bulk_create(to_create.values())


class Migration(migrations.Migration):

    dependencies = [
        ("autorisaties", "0010_catalogusautorisatie"),
    ]

    operations = [
        migrations.RunPython(
            migrate_autorisatiespecs_to_catalogus_autorisaties,
            migrate_catalogus_autorisaties_to_autorisatiespecs,
        )
    ]
